name: python

on:
  push:
    branches:
      - master
    tags:
      - "**"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
#  linux:
#    runs-on: ${{ matrix.platform.runner }}
#    strategy:
#      matrix:
#        platform:
#          - runner: ubuntu-latest
#            target: aarch64-unknown-linux-gnu
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v3
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#        with:
#          platforms: linux/arm64
#
#      - name: Create build script
#        run: |
#          cat << 'EOF' > cli/build.sh
#          #!/bin/bash
#
#          # Exit on error and show commands
#          set -ex
#
#          # Set up Rust
#          curl -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
#
#          # Add Rust to PATH
#          source $HOME/.cargo/env
#
#          # Add target
#          # rustup target add $1
#
#          # Install maturin
#          pip install maturin
#
#          # Build
#          maturin build --release --target $1 --out dist
#          EOF
#
#          # Make build script executable
#          chmod +x cli/build.sh
#
#      - name: Build in Docker
#        run: |
#          docker run --rm \
#            --platform linux/arm64 \
#            -v ${{ github.workspace }}:/io \
#            -w /io/cli \
#            ghcr.io/rust-cross/manylinux_2_28-cross:aarch64 \
#            /bin/bash -c "./build.sh ${{ matrix.platform.target }}"

  linux2:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
        - runner: ubuntu-latest
          target: aarch64-unknown-linux-gnu
          # docker-options: --platform linux/arm64
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Generate .cargo/config.toml
        run: |
            mkdir -p .cargo
            echo '[build]' > .cargo/config.toml
            echo '[target."cfg(all())".dependencies.libpg_query-sys]' >> .cargo/config.toml
            echo 'rustflags = ["-C", "link-arg=-DHAVE_STRCHRNUL"]' >> .cargo/config.toml

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          working-directory: cli
          args: --release --out dist -v --zig
          manylinux: manylinux_2_28
          docker-options: ${{ matrix.platform.docker-options }}
          sccache: "true"
          before-script-linux: ${{ matrix.platform.before-script }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: cli/dist
          if-no-files-found: error
